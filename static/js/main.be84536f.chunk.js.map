{"version":3,"sources":["gfx/banner.png","serviceWorker.ts","CurrencyEntry.tsx","CurrencyHeading.tsx","CurrencyTable.tsx","HeaderBanner.tsx","Header.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","round","num","Math","pow","CurrencyEntry","id","rank","name","symbol","circ","total","price","cap","change","changeColorClass","historyGraph","className","src","alt","CurrencyHeading","handler","text","onClick","matchSearch","str","query","toUpperCase","startsWith","toUpper","x","sortObjectList","list","newProp","ascending","concat","sort","a","b","CurrencyTable","useState","entryList","setList","filteredList","setFilteredList","lastUpdate","setLastUpdate","pagePos","setPagePos","sortAscending","setAscending","sortKey","setSortKey","API_KEY","SET_API_KEY","fetchData","console","log","CORS_ANYWHERE","result","data","headers","params","axios","get","then","r","catch","err","map","e","cmc_rank","circulating_supply","total_supply","quote","EUR","market_cap","percent_change_24h","handleUpdate","Date","now","f","sorted","handleSort","target","onSubmit","preventDefault","keyBox","value","length","classList","add","interval","setInterval","clearInterval","alert","placeholder","onChange","type","filter","entry","i","key","slice","HeaderBanner","href","banner","Header","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.be84536f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner.dbe8047a.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './CurrencyEntry.css';\n\nfunction CurrencyEntry({id, rank, name, symbol, circ, total, price, cap, change}: any) {\n  const changeColorClass = (change < 0) ? 'neg' : 'pos';\n  const historyGraph = `https://s2.coinmarketcap.com/generated/sparklines/web/7d/usd/${id}.png`\n  return (\n    <div className=\"currency\">\n      <div className=\"rank\">{rank}</div>\n      <div className=\"name\">{name}</div>\n      <div className=\"symbol\">{symbol}</div>\n      <div className=\"circ\">{round(circ)} {symbol}</div>\n      <div className=\"total\">{round(total)} {symbol}</div>\n      <div className=\"price\">{round(price)} €</div>\n      <div className=\"cap\">{round(cap)} €</div>\n      <div className={\"change \" + changeColorClass}>{round(change)}%</div>\n      <img className=\"history\" src={historyGraph} alt=\"History graph\"/>\n    </div>\n  );\n}\n\nconst round = (num: number) => {\n  return Math.round(num * Math.pow(10, 4)) / Math.pow(10,4)\n}\n\nexport default CurrencyEntry;\n","import React from 'react';\nimport './CurrencyHeading.css';\n\nfunction CurrencyHeading ({id, handler, text}: any) {\n  return (\n    <div className=\"heading\" onClick={handler} id={id}>{text}</div>\n  )\n}\nexport default CurrencyHeading;\n","/*\nMain program logic (API fetching, processing and displaying) lives here.\nAPI key is entered in an input form.\n\nFor local testing, a CORS Proxy was in place.\n(https://github.com/Rob--W/cors-anywhere)\n\n*/\n\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport CurrencyEntry from './CurrencyEntry';\nimport CurrencyHeading from './CurrencyHeading';\nimport './CurrencyTable.css';\n\nfunction CurrencyTable() {\n  const [entryList, setList]          = useState([])\n  const [filteredList, setFilteredList] = useState([])\n  const [lastUpdate, setLastUpdate]   = useState(0)\n  const [pagePos, setPagePos]         = useState(0)\n  const [sortAscending, setAscending] = useState(true)\n  const [sortKey, setSortKey]         = useState(\"rank\")\n  const [API_KEY, SET_API_KEY]        = useState(\"\")\n  \n  const CORS_ANYWHERE = \"https://cors-anywhere.herokuapp.com/\"\n  const ELEMS_PER_PAGE   = 50\n  const HEADINGS = [\"rank\", \"name\", \"symbol\", \"circ\", \"total\", \"price\", \"cap\", \"change\", \"history\"]\n\n  // Update data every INTERVAL milliseconds\n  // https://stackoverflow.com/questions/39426083/update-react-component-every-second\n  const INTERVAL = 10000\n\n  // Return latest results as list of objects\n  const fetchData = async() => {\n    console.log(\"Updated\")\n    const URL: string       = CORS_ANYWHERE + \"https://sandbox-api.coinmarketcap.com/v1/cryptocurrency/listings/latest\"\n    const CURRENCY: string  = \"EUR\"\n    const AMOUNT: number    = 5000\n    var result: any         = {data: []}\n  \n    const headers = {\n      \"Accept\": \"application/json\",\n      \"X-CMC_PRO_API_KEY\": API_KEY\n    }\n    const params = {\n      \"start\": 1,\n      \"limit\": AMOUNT,\n      \"convert\": CURRENCY\n    }\n    await axios.get(URL, {headers, params})\n         .then(r => {result = r.data})\n         .catch((err) => {console.log(\"ERROR (Axios): \"); console.log(err);})\n\n    // Convert Axios promise to list of objects\n    return result.data.map((e: any) => { return {\n      \"id\" :    e.id,\n      \"rank\" :  e.cmc_rank,\n      \"name\" :  e.name,\n      \"symbol\": e.symbol,\n      \"circ\":   e.circulating_supply,\n      \"total\":  e.total_supply,\n      \"price\":  e.quote.EUR.price,\n      \"cap\":    e.quote.EUR.market_cap,\n      \"change\": e.quote.EUR.percent_change_24h }\n      })\n\n  }\n  // Set API key and start updating in interval\n  const submitKey = (e: any) => {\n    e.preventDefault()\n    const val = e.target.keyBox.value\n    if (val.length !== 36) {\n      window.alert(\"Enter a valid API key.\")\n      return\n    }\n    SET_API_KEY(e.target.keyBox.value)\n    handleUpdate()\n    e.target.classList.add(\"submitted\")\n    const interval = setInterval(() => handleUpdate(), INTERVAL);\n    return () => {\n      clearInterval(interval);\n    };\n  }\n  // Handlers \n  const handleUpdate = () => {\n    if (Date.now() - lastUpdate >= 5000) {\n      fetchData().then(f => { \n        const sorted = sortObjectList(f, sortKey, sortAscending);\n        setList(sorted);\n        setFilteredList(sorted);})\n      setLastUpdate(Date.now())\n    }\n  }\n  const handleNextPage = () => {\n    if (pagePos + ELEMS_PER_PAGE < filteredList.length)\n      setPagePos(pagePos+ELEMS_PER_PAGE)\n  }\n  const handlePrevPage = () => {\n    if (pagePos - ELEMS_PER_PAGE >= 0)\n      setPagePos(pagePos-ELEMS_PER_PAGE)\n  }\n  const handleSearch = (e: any) => {\n    setPagePos(0)\n    const query = e.target.value\n    setFilteredList(entryList.filter((entry: any) => \n        matchSearch(entry.name, query) || matchSearch(entry.symbol, query)))\n  }\n  const handleKeyBox = (e: any) => {\n    SET_API_KEY(e.target.value)\n  }\n  const handleSort = (e: any) => {\n    const newProp = e.target.id\n    setFilteredList(sortObjectList(entryList, newProp, sortAscending))\n    setAscending(!sortAscending)\n    setSortKey(newProp)\n  }\n  // TODO: Improve readability\n  return (\n    <div className=\"currencyTable\">\n      <div className=\"navigation\">\n        <div className=\"pageDisplay\">\n          <form id=\"keyForm\" onSubmit={submitKey}>\n            <input name=\"keyBox\" id=\"keyBox\" placeholder=\"Enter API key\" onChange={handleKeyBox}></input>\n            <input name=\"submit\" id=\"keySubmit\" type=\"submit\"/>\n          </form>\n          <input id=\"searchBox\" onChange={handleSearch} placeholder=\"Search\"></input>\n          <button className=\"pageButton\" onClick={handlePrevPage}>Previous page</button>\n          <button className=\"pageButton\" onClick={handleNextPage}>Next page</button>\n          <div id=\"results\">Results: {pagePos + 1} - {filteredList.length}</div>\n        </div>\n      </div>\n      <div className=\"headings\"> \n        { HEADINGS.map(\n              (id: string, i: number) => \n              (<CurrencyHeading \n              id      = {id} \n              handler = {handleSort} \n              text    = {id}\n              key     = {i}\n              />))\n        } \n      </div>    \n      <div className=\"entries\">\n      { filteredList         // Entry creation\n          .map( \n           (entry: any, i: number) => \n           (<CurrencyEntry \n           id     = {entry.id}\n           rank   = {entry.rank}\n           name   = {entry.name} \n           symbol = {entry.symbol} \n           circ   = {entry.circ} \n           total  = {entry.total} \n           price  = {entry.price}\n           cap    = {entry.cap} \n           change = {entry.change} \n           key    = {i}\n           />))\n          // Pagination \n          .slice(pagePos, pagePos+ELEMS_PER_PAGE) \n      }\n      </div>\n    </div>\n  )\n}\n\n// Helper functions\nconst matchSearch = (str: string, query: string) => {\n  return str.toUpperCase().startsWith(query.toUpperCase()) \n}\n\nconst isString = (s: string) => {\n  return (typeof s == \"string\")\n}\n\nconst toUpper = (x: any) => {\n  if (isString(x))\n    return x.toUpperCase()\n  else return x\n}\n\nconst sortObjectList = (list: any, newProp: any, ascending: boolean) => { \n  if (ascending)\n    return (list.concat([]).sort((a: any, b: any) => (toUpper(a[newProp]) > b[newProp]) ? 1 : -1))\n  else\n    return (list.concat([]).sort((a: any, b: any) => (toUpper(a[newProp]) < b[newProp]) ? 1 : -1))\n}\n\nexport default CurrencyTable;\n","import React from 'react';\nimport banner from './gfx/banner.png';\nimport './HeaderBanner.css';\n\nfunction HeaderBanner() {\n  return (\n    <div className=\"banner\">\n      <a href=\"/CoinMarketRecapPub/\"><img src={banner} alt=\"Page logo\" /></a> \n    </div>\n  );\n}\n\nexport default HeaderBanner;\n\n","import React from 'react';\nimport HeaderBanner from './HeaderBanner';\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <HeaderBanner />\n    </div>\n  );\n}\n\nexport default Header;\n\n\n","/* \nindex page\n\nMain program logic sits in CurrencyTable.tsx\n*/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n// Components and data\nimport CurrencyTable from './CurrencyTable';\nimport Header from './Header';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <CurrencyTable />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}